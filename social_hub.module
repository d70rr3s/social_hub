<?php

/**
 * @file
 * Primary module hooks for Social Hub module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 *
 * @phpcs:disable Drupal.Semantics.FunctionT.ConcatString
 */

include_once DRUPAL_ROOT . '/core/themes/engines/twig/twig.engine';

use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function social_hub_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  if ($route_name !== 'help.page.social_hub' && !preg_match('/^social_hub\.+$/', $route_name)) {
    return $output;
  }

  $filepath = [
    \Drupal::moduleHandler()->getModule('social_hub')->getPath(),
    'help',
    $route_name . '.html.twig',
  ];
  $template_file = implode(DIRECTORY_SEPARATOR, $filepath);
  $absolute_path = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $template_file;

  if (file_exists($absolute_path)) {
    $variables = _social_hub_help_get_variables($route_name);
    $output = twig_render_template($template_file, $variables + ['theme_hook_original' => 'not-applicable']);
  }

  return $output;
}

/**
 * Get template variables for a given route.
 *
 * @param string $route_name
 *   A route name.
 *
 * @return array
 *   An assoc array of variables.
 *
 * @internal
 */
function _social_hub_help_get_variables($route_name) {
  $variables = [
    'help.page.social_hub' => [
      'efs' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/efs',
        ':title' => t(':name module page', [':name' => 'EFS'], ['context' => 'EFS']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'EFS'], ['context' => 'EFS'])]),
        '@text' => t('here'),
      ], ['context' => 'EFS'])),
      'github' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://github.com/d70rr3s/social_hub',
        ':title' => t('Social Hub issue tracker'),
        ':label' => t('Click to visit :page', [':page' => t('Social Hub issue tracker')]),
        '@text' => t('GitHub'),
      ], ['context' => 'Social Hub'])),
      'issues' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/issues/social_hub?categories=All',
        ':title' => t('Social Hub issue tracker'),
        ':label' => t('Click to visit :page', [':page' => t('Social Hub issue tracker')]),
        '@text' => t('issue tracker on Drupal.org'),
      ], ['context' => 'Issues'])),
      'guidelines' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/issue-summaries',
        ':title' => t('Issues guidelines'),
        ':label' => t('Click to visit :page', [':page' => t('Issues guidelines')]),
        '@text' => t('guidelines'),
      ], ['context' => 'Issues guidelines'])),
      'better_social_sharing_buttons' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/better_social_sharing_buttons',
        ':title' => t(':name module page', [':name' => 'Better Social Sharing Buttons'], ['context' => 'BSSB']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'Better Social Sharing Buttons'], ['context' => 'BSSB'])]),
        '@text' => t('Better Social Sharing Buttons'),
      ], ['context' => 'BSSB'])),
      'share_everywhere' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/share_everywhere',
        ':title' => t(':name module page', [':name' => 'Share Everywhere'], ['context' => 'Share Everywhere']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'Share Everywhere'], ['context' => 'Share Everywhere'])]),
        '@text' => t('Share Everywhere'),
      ], ['context' => 'Share Everywhere'])),
      'simplesharer' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/simplesharer',
        ':title' => t(':name module page', [':name' => 'Simple Sharer'], ['context' => 'Simple Sharer']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'Simple Sharer'], ['context' => 'Simple Sharer'])]),
        '@text' => t('Simple Sharer'),
      ], ['context' => 'Simple Sharer'])),
      'social_media' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/social_media',
        ':title' => t(':name module page', [':name' => 'Social Media'], ['context' => 'Social Media']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'Social Media'], ['context' => 'Social Media'])]),
        '@text' => t('Social Media'),
      ], ['context' => 'Social Media'])),
      'social_media_links' => Markup::create(t('<a href=:url target="_blank" title=":title" aria-label=":label">@text</a>', [
        ':url' => 'https://www.drupal.org/project/social_media',
        ':title' => t(':name module page', [':name' => 'Social Media Links'], ['context' => 'Social Media Links']),
        ':label' => t('Click to visit :page', [':page' => t(':name module page', [':name' => 'Social Media Links'], ['context' => 'Social Media Links'])]),
        '@text' => t('Social Media Links'),
      ], ['context' => 'Social Media Links'])),
    ],
  ];

  return $variables[$route_name] ?? [];
}

/**
 * Implements hook_theme().
 */
function social_hub_theme() {
  $base_variables = [
    'url' => NULL,
    'link_type' => NULL,
    'icon' => NULL,
    'text' => NULL,
    'attributes' => NULL,
    'extras' => NULL,
  ];

  $share_variables = [
    'sharing_mode' => NULL,
    'script' => NULL,
  ];

  $hooks = [
    'share' => [
      'variables' => $share_variables + $base_variables,
      'template' => 'share',
    ],
    'share__embed' => [
      'template' => 'share--embed',
    ],
    'follow' => [
      'variables' => $base_variables,
      'template' => 'follow',
    ],
    'platform' => [
      'variables' => [
        'entity' => NULL,
        'content' => NULL,
      ],
    ],
  ];

  return $hooks;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function social_hub_theme_suggestions_platform(array $variables) {
  /** @var \Drupal\social_hub\PlatformInterface $entity */
  $entity = $variables['entity'];
  $suggestions[] = 'platform__' . $entity->id();

  foreach ($entity->getPlugins() as $plugin) {
    $suggestions[] = 'platform__' . $entity->id() . '__' . $plugin;
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function social_hub_theme_suggestions_share(array $variables) {
  $suggestions[] = 'share__' . $variables['sharing_mode'];

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_hub_preprocess_share(&$variables) {
  _social_hub_preprocess_plugin($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_hub_preprocess_share__embed(&$variables) {
  _social_hub_preprocess_plugin($variables);
  $variables['embed_attributes'] = new Attribute($variables['extras']['embed_attributes'] ?? []);
  $variables['embed_value'] = $variables['extras']['embed_value'] ?? NULL;
  unset($variables['extras']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function social_hub_preprocess_follow(&$variables) {
  _social_hub_preprocess_plugin($variables);
}

/**
 * Preprocess theme variables for plugins.
 *
 * @param array $variables
 *   An array of variables to preprocess.
 *
 * @internal
 */
function _social_hub_preprocess_plugin(array &$variables) {
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->setAttribute('href', $variables['url']);
  // @TODO Make icons set configurable.
  $variables['icon'] = 'fab ' . $variables['icon'];
}

/**
 * Implements hook_library_info_build().
 */
function social_hub_library_info_build() {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
  $storage = \Drupal::service('entity_type.manager')->getStorage('platform');
  $results = $storage->getQuery()
    // @TODO Refactor to use an interface instead of fixed config value.
    ->condition('plugins.*', ['share'], 'IN')
    ->execute();
  $entities = [];
  $libraries = [];

  if (!empty($results)) {
    /** @var \Drupal\social_hub\PlatformInterface[] $entities */
    $entities = $storage->loadMultiple($results);
  }

  if (empty($entities)) {
    return [];
  }

  foreach ($entities as $entity) {
    /** @var \Drupal\social_hub\PlatformIntegrationPluginInterface $plugin */
    $plugin = $entity->getPluginCollection()->get('share');
    $configuration = $plugin->getConfiguration();
    if (empty($configuration['script_type']) || $configuration['script_type'] !== 'external') {
      continue;
    }

    $namespace = "{$entity->id()}_share";
    $libraries += [
      $namespace => [
        'js' => [],
      ],
    ];
    $libraries[$namespace]['js'][$configuration['external']['url']] = [
      'type' => 'external',
      'attributes' => $configuration['external']['attributes'],
      'preprocess' => $configuration['external']['preprocess'],
    ];

    $browsers = array_filter(_social_hub_process_browsers_rule($configuration['external']['browsers']));

    if (!empty($browsers)) {
      $libraries[$namespace]['js'][$configuration['external']['url']]['browsers'] = $browsers;
    }
  }

  return $libraries;
}

/**
 * Process supported browsers rule.
 *
 * Rules are stored using key/values text separated by colons and commas.
 * E.g.: 'IE:lte IE 9,!IE:false'.
 *
 * @param string $string
 *   The rule.
 *
 * @return array
 *   The supported browsers array.
 *
 * @internal
 */
function _social_hub_process_browsers_rule($string) {
  $tmp = explode(',', $string);

  if (empty($tmp)) {
    return [];
  }

  if (!is_array($tmp)) {
    return [];
  }

  $rules = [];

  foreach ($tmp as $item) {
    $rules += explode(':', $item);
  }

  return $rules;
}
